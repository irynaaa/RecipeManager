@model BLL.ViewModels.AddRecipeViewModel

@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";

    <link href="~/Content/dropZone.css" rel="stylesheet" />
    <!-- TinyMCE Script Reference -->
    <script src="~/scripts/tinymce/tinymce.min.js"></script>
    <!-- Script to wire up your TinyMCE editor -->
    @*<script>
        Dropzone.options.dropzoneForm = {
            init: function () {
                this.on("complete", function (data) {
                    //var res = eval('(' + data.xhr.responseText + ')');
                    var res = JSON.parse(data.xhr.responseText);
                });
            }
        };
    </script>*@
    <script type="text/javascript">
        // Initialize your tinyMCE Editor with your preferred options mode: "textareas",
        tinymce.init({
            mode: "textareas",
            height: 500,
            theme: 'modern',
            plugins: [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools'
            ],
            toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
            toolbar2: 'print preview media | forecolor backcolor emoticons ',
            image_advtab: true,

        });
       
    </script>
}
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Редактор</title>
    
   
</head>
<body>
    <h2>Add</h2>
    @Html.Partial("_Dropzone")
    @using (Html.BeginForm("Add", "Recipe", FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>AddRecipeViewModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.RecipeName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RecipeName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RecipeName, "", new { @class = "text-danger" })
                </div>
           </div>
            @*<div class="form-group">
                    @Html.LabelFor(model => model.RecipeImage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.RecipeImage, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RecipeImage, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.TextBoxFor(m => m.PhotoUpload, new { type = "file" })
                @*<div class="col-md-10">
                        <input type="file" name="Image" id="Image" class="form-control" />
                    </div>*@
            </div>

           
            
            <div class="form-group">
                @Html.LabelFor(model => model.RecipeDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    
                        @Html.TextAreaFor(model => model.RecipeDescription, new { htmlAttributes = new { @class = "form-control", @rows = "10", @cols = "100", @style = "width:100%;" } })
                        @Html.ValidationMessageFor(model => model.RecipeDescription, "", new { @class = "text-danger" })
                    </div>
            </div>
            @*<div class="form-group">
                    @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreatedAt.Date, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ModefiedAt, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ModefiedAt, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModefiedAt, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="form-group">
                @Html.LabelFor(model => model.CookingTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CookingTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CookingTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RecipeCategoryId)
                @Html.DropDownListFor(model => model.RecipeCategoryId, new SelectList(Model.Categories, "Id", "Name"), "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RecipeCategoryId, "", new { @class = "text-danger" })
            </div>
            @*<div class="form-group">
                    @Html.LabelFor(model => model.Products)
                    @for(int i=0;i<Model.Products.Count();i++)
                    {
                        @Html.EditorFor(m => Model.Products[i].IsChecked)
                        @Html.DisplayFor(m=> Model.Products[i].Name)

                        @Html.HiddenFor(m => Model.Products[i].Name)
                        @Html.HiddenFor(m=>Model.Products[i].Id)
                    }

                </div>*@
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</body>
</html> 
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
