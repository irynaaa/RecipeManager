@model BLL.ViewModels.EditRecipeViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>EditRecipeViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.RecipeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecipeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecipeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecipeImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecipeImage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecipeImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecipeDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecipeDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecipeDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModefiedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModefiedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModefiedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CookingTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CookingTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CookingTime, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.RecipeCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecipeCategoryId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecipeCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.RecipeCategoryId)
            @Html.DropDownListFor(model => model.RecipeCategoryId, new SelectList(Model.Categories, "Id", "Name"), "", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.RecipeCategoryId, "", new { @class = "text-danger" })
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Products, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select data-placeholder="" name="mySelectChosen" id="mySelectChosen" multiple class="chosen-select">
                    <option value=""></option>
                    @foreach (var item in (IEnumerable<BLL.ViewModels.SelectItemViewModel>)ViewBag.ListProducts)
                    {
                        int roleId = Model.Products.SingleOrDefault(r => r == item.Id);
                        string selected = "";
                        if (roleId != 0)
                        {
                            selected = "selected";
                        }
                        <option value="@item.Id" @Html.Raw(selected)>@item.Name</option>
                    }
                </select>
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Products)
            @for (int i = 0; i < Model.Products.Count(); i++)
            {
                @Html.EditorFor(m => Model.Products[i].IsChecked)
                @Html.DisplayFor(m => Model.Products[i].Name)

                @Html.HiddenFor(m => Model.Products[i].Name)
                @Html.HiddenFor(m => Model.Products[i].Id)
            }

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@*@section styles {
    <link href="~/Content/bootstrap-chosen/bootstrap-chosen.css" rel="stylesheet" />
}
@section scripts {
    <script src="~/Scripts/chosen.jquery.js"></script>
    <script>
        $(".chosen-select").chosen();
        $(".chosen-select-deselect").chosen({ allow_single_deselect: true });
    </script>
}*@
